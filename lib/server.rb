# frozen_string_literal: true

require 'sinatra'
require 'octokit'
require 'dotenv/load' # Manages environment variables
require 'json'
require 'openssl'     # Verifies the webhook signature
require 'jwt'         # Authenticates a GitHub App
require 'time'        # Gets ISO 8601 representation of a Time object
require 'logger'      # Logs debug statements
require_relative 'investigation'
require_relative 'policy'
require_relative 'request/fresh'

set :port, 8080
set :bind, '0.0.0.0'

##
# GitHub App.
#
class GHAapp < Sinatra::Application
  # Converts the newlines. Expects that the private key has been set as an
  # environment variable in PEM format.
  PRIVATE_KEY = OpenSSL::PKey::RSA.new(ENV.fetch('GITHUB_PRIVATE_KEY').gsub('\n', "\n"))

  # Your registered app must have a secret set. The secret is used to verify
  # that webhooks are sent by GitHub.
  #  WEBHOOK_SECRET = ENV['GITHUB_WEBHOOK_SECRET']

  # The GitHub App's identifier (type integer) set when registering an app.
  APP_IDENTIFIER = ENV.fetch('GITHUB_APP_IDENTIFIER')

  # Turn on Sinatra's verbose logging during development
  configure :development do
    set :logging, Logger::DEBUG
  end

  # Executed before each request to the `/event_handler` route
  before '/event_handler' do
    get_payload_request(request)
    # verify_webhook_signature
    app_client
    # Authenticate the app installation in order to run API operations
    authenticate_installation(@payload)
  end

  post '/event_handler' do
    if request.env['HTTP_X_GITHUB_EVENT'] == 'pull_request' && @payload['action'] == 'opened'
      handle_pull_request_opened_event(@payload)
    end

    200
  end

  def handle_pull_request_opened_event(payload)
    repo = payload['repository']['full_name']
    pr = payload['pull_request']['number']
    @installation_client.add_comment(repo, pr, Policy.new(Investigation.new(payload).dossier))
  end

  # Saves the raw payload and converts the payload to JSON format
  def get_payload_request(request)
    # The raw text of the body is required for webhook signature verification
    @payload_raw = Fresh.new(request).body
    begin
      @payload = JSON.parse @payload_raw
    rescue StandardError => e
      raise "Invalid JSON (#{e}): #{@payload_raw}"
    end
  end

  # Instantiate an Octokit client authenticated as a GitHub App.
  # GitHub App authentication requires that you construct a
  # JWT (https://jwt.io/introduction/) signed with the app's private key,
  # so GitHub can be sure that it came from the app and was not altered by
  # a malicious third party.
  def app_client
    payload = {
      # The time that this JWT was issued, _i.e._ now.
      iat: Time.now.to_i,

      # JWT expiration time
      exp: Time.now.to_i + (5 * 60),

      # Your GitHub App's identifier number
      iss: APP_IDENTIFIER
    }

    # Cryptographically sign the JWT.
    jwt = JWT.encode(payload, PRIVATE_KEY, 'RS256')

    # Create the Octokit client, using the JWT as the auth token.
    @app_client ||= Octokit::Client.new(bearer_token: jwt)
  end

  # Instantiate an Octokit client, authenticated as an installation of a
  # GitHub App, to run API operations.
  def authenticate_installation(payload)
    @installation_id = payload['installation']['id']
    @installation_token = @app_client.create_app_installation_access_token(@installation_id)[:token]
    @installation_client = Octokit::Client.new(bearer_token: @installation_token)
  end

  # Check X-Hub-Signature to confirm that this webhook was generated by
  # GitHub, and not a malicious third party.
  #
  # GitHub uses the WEBHOOK_SECRET, registered to the GitHub App, to
  # create the hash signature sent in the `X-HUB-Signature` header of each
  # webhook. This code computes the expected hash signature and compares it to
  # the signature sent in the `X-HUB-Signature` header. If they don't match,
  # this request is an attack, and you should reject it. GitHub uses the HMAC
  # hexdigest to compute the signature. The `X-HUB-Signature` looks something
  # like this: "sha1=123456".
  # See https://developer.github.com/webhooks/securing/ for details.
  #    def verify_webhook_signature
  #      their_signature_header = request.env['HTTP_X_HUB_SIGNATURE'] || 'sha1='
  #      method, their_digest = their_signature_header.split('=')
  #      our_digest = OpenSSL::HMAC.hexdigest(method, WEBHOOK_SECRET, @payload_raw)
  #      halt 401 unless their_digest == our_digest
  #
  #      # The X-GITHUB-EVENT header provides the name of the event.
  #      # The action value indicates the which action triggered the event.
  #      logger.debug "---- received event #{request.env['HTTP_X_GITHUB_EVENT']}"
  #      logger.debug "----    action #{@payload['action']}" unless @payload['action'].nil?
  #    end

  # Finally some logic to let us run this server directly from the command line,
  # or with Rack. Sinatra run method.
  run! if __FILE__ == $PROGRAM_NAME
end
